/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const port = 3000;
const app = express();

var todoarray = [];
app.use(bodyParser.json());

function create_todo(req, res){
  var pos = req.body;
  let id_ = Math.floor((Math.random() * 987654));
  var newTodoItem ={
      id : id_ ,
      title : "title is " + pos.title,
      description : pos.Description + " " + id_,
      completed : pos.completed,
    }
  todoarray.push(newTodoItem);
  console.log("new to do item created");
  res.status(201).send({id: id_});
}


function findbyid(id){
  for(var i = 0;i< todoarray.length; i++){
    if(todoarray[i].id == id ){
      return i; 
    }
}
return "X";
}

function update_todo(req,res){
  var id = req.params.id;
  var reqbody = req.body;
  var result = findbyid(id);
  if(result != "X"){
    for(var keys in reqbody){
      switch (keys) {
          case "title":
            todoarray[result].title = reqbody.title;
              break;
          case "Description":
            todoarray[result].description = reqbody.Description;
                break;
          case "completed":
            todoarray[result].completed = reqbody.completed;
            break;
          default:
            continue;
      }
    }
    res.status(200).send("OK");
  }
  else{
    res.status(404).send({error: 'Not found'});
  }
}

function getalltodos(req, res){
    res.status(200).send(todoarray);
}

function retrieve_todo(req, res){
  var id = req.params.id;
  var result = findbyid(id);
  if(result != "X"){
    res.send(todoarray[result]);
  }
  else{
    res.status(404).send({error: 'Not found'});
  }
}

function delete_todo(req, res){
  var id = req.params.id;
  var result = findbyid(id);
  todoarray.splice(result,1);
  res.send("Deleted successfully");
  console.log(todoarray);
}

app.get('/todos', getalltodos);  // working
app.get('/todos/:id', retrieve_todo); //working
app.post('/todos', create_todo); //working
app.put('/todos/:id', update_todo); 
app.delete('/todos/:id', delete_todo); //working



function started(){
  console.log(`Todo Server is running on port ${port}`);
}

app.listen(port, started);

module.exports = app;
